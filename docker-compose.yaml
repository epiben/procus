version: "3.8"

services:

  starter:
    build:
      context: .
      dockerfile: Dockerfile
    command: python /app/app_starter.py
    # entrypoint: /bin/sh
    # command: -c "sleep 3600"
    # NB! No port mapped to host as this is unneeded
    secrets:
      - cpsms_api_token
      - postgres_password
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
        restart: true
    networks:
      - backend

  fastapi:
    build:
      context: .
      dockerfile: Dockerfile
    command: python /app/app_fastapi.py
    secrets:
      - cpsms_webhook_token
      - postgres_password
    expose:
      - 5000
    ports:
      - 50000:5000
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -fs http://fastapi:5000/health || exit 1"
        ]
      interval: 30s
      timeout: 5s
      start_period: 30s
      retries: 5
    depends_on:
      db:
        condition: service_healthy
        restart: true
    volumes:
      - ./persistent_storage/:/persistent_storage/
    networks:
      - frontend
      - backend

  ngrok:
    image: ngrok/ngrok:3.8.0-alpine
    command: start fastapi --config /run/secrets/ngrok_config
    secrets:
      - ngrok_config
    ports:
      - 4040:4040
    restart: unless-stopped
    depends_on:
      fastapi:
        condition: service_healthy
        restart: true
    networks:
      - frontend

  db:
    build:
      context: postgres
      dockerfile: Dockerfile
    environment:
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      POSTGRES_USER: postgres
    secrets:
      - postgres_password
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d postgres" ]
      interval: 10s
      timeout: 30s
      retries: 5
      start_period: 60s
    volumes:
      - ./postgres/.data/:/var/lib/postgresql/data
      - ./postgres/init_ddl.sql:/docker-entrypoint-initdb.d/init_0.sql
      - ./postgres/init_dml.sql:/docker-entrypoint-initdb.d/init_1.sql
      - ./postgres/add_dummy_data.sql:/docker-entrypoint-initdb.d/init_2.sql
    restart: unless-stopped
    networks:
      - backend
      - shared_pg_network

  test-db:
    build:
      context: postgres
      dockerfile: Dockerfile
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d postgres" ]
      interval: 10s
      timeout: 30s
      retries: 5
      start_period: 60s
    volumes:
      - ./postgres/init_ddl.sql:/docker-entrypoint-initdb.d/init_0.sql
      - ./postgres/init_dml.sql:/docker-entrypoint-initdb.d/init_1.sql
    restart: unless-stopped
    networks:
      - backend

  test-fastapi:
    build:
      context: .
      dockerfile: Dockerfile
    command: pytest /app/tests/tests_fastapi.py
    depends_on:
      fastapi:
        condition: service_healthy
        restart: true
      db:
        condition: service_healthy
        restart: true
    networks:
      - frontend
      - backend

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge
  shared_pg_network:
    external: true
    # Remember to create this network if it doesn't already exist, with
    # docker network create --driver bridge shared_pg_network

secrets:
  cpsms_api_token:
    file: ./secrets/cpsms_api_token.txt
  cpsms_webhook_token:
    file: ./secrets/cpsms_webhook_token.txt
  ngrok_config:
    file: ./secrets/ngrok_config.yaml
  postgres_password:
    file: ./secrets/postgres_password.txt
